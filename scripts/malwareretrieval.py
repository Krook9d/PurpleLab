import os
import json
import pandas as pd
import sys
import subprocess
import time

# Getting the tag from user
SearchMalwareFamily = sys.argv[1]

# Directory path
base_dir = "/var/www/html/"
json_dir = os.path.join(base_dir, "Downloaded/json/")
samples_dir = os.path.join(base_dir, "Downloaded/samples/")
csv_dir = os.path.join(base_dir, "csv/")

if not os.path.exists(json_dir):
    os.makedirs(json_dir)

if not os.path.exists(samples_dir):
    os.makedirs(samples_dir)

if not os.path.exists(csv_dir):
    os.makedirs(csv_dir)

# Saving json
os.system('wget --post-data "query=get_taginfo&tag=%s&file_type=exe&limit=10" https://mb-api.abuse.ch/api/v1/ -O %s%s.json' % (SearchMalwareFamily, json_dir, SearchMalwareFamily))

# Converting the json to csv
file = open('%s%s.json' % (json_dir, SearchMalwareFamily))
data = json.load(file)
malwares = []

# Function to Download Malware sample with <sha256 hash>.zip
def DownloadSample(sha256):
    print(f"Downloading {sha256}...")
    file_path = os.path.join(samples_dir, f"{sha256}.zip")
    result = os.system('wget --post-data "query=get_file&sha256_hash=%s" https://mb-api.abuse.ch/api/v1/ -O %s' % (sha256, file_path))
    if result == 0:
        print(f"Downloaded {sha256} at {file_path}")
    else:
        print(f"Failed to download {sha256}.")

for i in data['data']:
    malwares.append(i)
    # Uncomment the following line to Download Sample
    DownloadSample(i['sha256_hash'])

# Creating DataFrame from the malwares list
df = pd.DataFrame(malwares)

# Replacing 'file_name' column data with 'sha256_hash'
df['file_name'] = df['sha256_hash']

# Saving the DataFrame in the form of csv
df.to_csv("%s/Malware-Bazar-%s-scraped-api.csv" % (csv_dir, SearchMalwareFamily), index=False)


print("Success.....")

time.sleep(3)

# Path to folder containing ZIP archives
dossier_zip = '/var/www/html/Downloaded/samples'

# Password for ZIP archives
mot_de_passe = 'infected'

# Function to unzip a file
def dezipper_archive(archive_path):
    try:
        subprocess.run(['7z', 'x', '-p' + mot_de_passe, '-o' + dossier_zip, archive_path])
        print(f'decompression of {archive_path} successful.')
    except Exception as e:
        print(f'Error during decompression of {archive_path}: {str(e)}')

# Browse files in ZIP folder
for root, dirs, files in os.walk(dossier_zip):
    for file in files:
        if file.endswith('.zip'):
            archive_path = os.path.join(root, file)
            dezipper_archive(archive_path)
            os.remove(archive_path)
            print(f'{archive_path} deleted.')

print('Decompression task completed.')

time.sleep(1)


# Command to disable Windows Defender real-time monitoring
powershell_command = (
    'VBoxManage guestcontrol "sandbox" run --exe '
    '"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe" --username oem --password oem '
    '-- -Command "& {Start-Process powershell -ArgumentList \'Set-MpPreference -DisableRealtimeMonitoring \$true\' -Verb RunAs}"'
)

# Run the command to disable Windows Defender real-time monitoring
try:
    subprocess.run(powershell_command, shell=True, check=True)
    print("PowerShell command successfully executed on the VM.")
except subprocess.CalledProcessError as e:
    print(f"Error executing PowerShell command : {e}")


time.sleep(5)

# Source folder on host machine
source_directory = "/var/www/html/Downloaded/samples"

# Destination folder on the virtual machine
destination_directory = "C:\\Users\\oem\\Documents\\samples"

# Virtual machine name
vm_name = "sandbox"

# Virtual machine identifiers
username = "oem"
password = "oem"

# Lists all files in the source folder
for file in os.listdir(source_directory):
    full_file_path = os.path.join(source_directory, file)
    if os.path.isfile(full_file_path):
        # Build the VBoxManage command for each file with specific destination filename
        destination_file = f"{destination_directory}\\{file}"
        vboxmanage_command = f'sudo VBoxManage guestcontrol "{vm_name}" copyto --username {username} --password {password} "{full_file_path}" "{destination_file}"'
        # Execute command
        print(f"Uploading {file} to VM...")
        result = subprocess.run(vboxmanage_command, shell=True)
        if result.returncode == 0:
            print(f"Successfully uploaded {file}")
        else:
            print(f"Failed to upload {file}")

print("Upload to VM completed.")
