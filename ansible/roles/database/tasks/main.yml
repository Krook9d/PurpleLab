---
- name: Installer PostgreSQL
  apt:
    name: 
      - postgresql
      - postgresql-contrib
      - python3-psycopg2
    state: present
    update_cache: true

- name: Démarrer et activer PostgreSQL
  service:
    name: postgresql
    state: started
    enabled: yes

- name: Créer l'utilisateur PostgreSQL
  become: true
  become_user: postgres
  postgresql_user:
    name: "{{ db_user }}"
    password: "{{ db_pass }}"
    role_attr_flags: SUPERUSER
    state: present

- name: Créer la base de données
  become: true
  become_user: postgres
  postgresql_db:
    name: "{{ db_name }}"
    owner: "{{ db_user }}"
    state: present

- name: Configurer l'authentification pour les connexions locales (mettre à jour pg_hba.conf)
  block:
    - name: Trouver le chemin du fichier pg_hba.conf
      shell: find /etc/postgresql -name pg_hba.conf
      register: pg_hba_path
      changed_when: false
    
    - name: Vérifier que le fichier pg_hba.conf existe
      debug:
        msg: "Fichier pg_hba.conf trouvé à: {{ pg_hba_path.stdout_lines[0] }}"
      when: pg_hba_path.stdout_lines | length > 0
    
    - name: Mettre à jour pg_hba.conf pour les connexions locales
      lineinfile:
        path: "{{ pg_hba_path.stdout_lines[0] }}"
        regexp: '^local\s+all\s+postgres\s+peer'
        line: 'local   all             postgres                                peer'
        state: present
      when: pg_hba_path.stdout_lines | length > 0
      register: pg_hba_updated

- name: Redémarrer PostgreSQL si pg_hba.conf a été modifié
  service:
    name: postgresql
    state: restarted
  when: pg_hba_updated is defined and pg_hba_updated.changed

- name: Créer le répertoire d'importation
  file:
    path: /var/www/html/enterprise-attack
    state: directory
    mode: '0755'
    owner: postgres
    group: postgres

- name: Copier le fichier CSV des tests atomiques
  copy:
    src: ../../enterprise-attack/index_atomic.csv
    dest: /var/www/html/enterprise-attack/index.csv
    mode: '0644'
    owner: postgres
    group: postgres

- name: Copier le fichier Excel des techniques Mitre
  copy:
    src: ../../enterprise-attack/enterprise-attack-techniques.xlsx
    dest: /var/www/html/enterprise-attack/enterprise-attack-techniques.xlsx
    mode: '0644'
    owner: postgres
    group: postgres

- name: Créer les tables dans PostgreSQL
  become: true
  become_user: postgres
  postgresql_query:
    db: "{{ db_name }}"
    query: |
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        first_name VARCHAR(255) NOT NULL,
        last_name VARCHAR(255) NOT NULL,
        email VARCHAR(255) NOT NULL UNIQUE,
        analyst_level VARCHAR(255) NOT NULL,
        avatar VARCHAR(255) NOT NULL,
        password VARCHAR(255) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
      
      CREATE TABLE IF NOT EXISTS contents (
        id SERIAL PRIMARY KEY,
        author_id INTEGER NOT NULL,
        content TEXT NOT NULL,
        FOREIGN KEY (author_id) REFERENCES users(id)
      );
      
      CREATE TABLE IF NOT EXISTS custom_payloads (
        id SERIAL PRIMARY KEY,
        author_id INTEGER NOT NULL,
        name VARCHAR(255) NOT NULL,
        content TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (author_id) REFERENCES users(id)
      );
      
      CREATE TABLE IF NOT EXISTS atomic_tests (
        id SERIAL PRIMARY KEY,
        tactic VARCHAR(255),
        technique_id VARCHAR(255),
        technique_name VARCHAR(255),
        test VARCHAR(255),
        test_name VARCHAR(255),
        Test_GUID VARCHAR(255),
        Executor_Name VARCHAR(255),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
      
      CREATE TABLE IF NOT EXISTS mitre_techniques (
        id VARCHAR(255) PRIMARY KEY,
        stix_id VARCHAR(255),
        name VARCHAR(255),
        description TEXT,
        url VARCHAR(255),
        created VARCHAR(255),
        last_modified VARCHAR(255),
        domain VARCHAR(255),
        version VARCHAR(255),
        tactics TEXT,
        detection TEXT,
        platforms TEXT,
        data_sources TEXT,
        is_sub_technique BOOLEAN,
        sub_technique_of VARCHAR(255),
        defenses_bypassed TEXT,
        contributors TEXT,
        permissions_required TEXT,
        supports_remote BOOLEAN,
        system_requirements TEXT,
        impact_type TEXT,
        effective_permissions TEXT,
        relationship_citations TEXT
      );

- name: Importer les données CSV dans atomic_tests
  become: true
  become_user: postgres
  shell: |
    psql -d {{ db_name }} -c "\COPY atomic_tests(tactic, technique_id, technique_name, test, test_name, Test_GUID, Executor_Name) FROM '/var/www/html/enterprise-attack/index.csv' WITH (FORMAT csv, DELIMITER ';', HEADER true, NULL '');"
  ignore_errors: yes

- name: Créer le script PHP d'importation des techniques Mitre
  copy:
    content: |
      <?php
      // Script pour importer les données Excel dans PostgreSQL
      require '/var/www/html/vendor/autoload.php';
      use PhpOffice\PhpSpreadsheet\Reader\Xlsx;

      ini_set('memory_limit', '512M');
      set_time_limit(300);

      $conn_string = "host=localhost dbname={{ db_name }} user={{ db_user }} password={{ db_pass }}";
      $conn = pg_connect($conn_string);

      if (!$conn) {
          die("Error connecting to database: " . pg_last_error());
      }

      pg_query($conn, "TRUNCATE TABLE mitre_techniques");

      $reader = new Xlsx();
      $spreadsheet = $reader->load('/var/www/html/enterprise-attack/enterprise-attack-techniques.xlsx');
      $worksheet = $spreadsheet->getActiveSheet();
      $highestRow = $worksheet->getHighestRow();
      $headers = [];

      foreach ($worksheet->getRowIterator(1, 1) as $row) {
          $cellIterator = $row->getCellIterator();
          $cellIterator->setIterateOnlyExistingCells(FALSE);
          foreach ($cellIterator as $cell) {
              $headers[] = $cell->getValue();
          }
      }

      $count = 0;
      foreach ($worksheet->getRowIterator(2) as $row) {
          $data = [];
          $cellIterator = $row->getCellIterator();
          $cellIterator->setIterateOnlyExistingCells(FALSE);
          
          foreach ($cellIterator as $cell) {
              $data[] = $cell->getValue();
          }
          
          // Fill with NULL if necessary
          while (count($data) < count($headers)) {
              $data[] = null;
          }
          
          $values = [];
          $placeholders = [];
          for ($i = 0; $i < count($headers); $i++) {
              if ($i == 13 || $i == 18) {
                  // Convert boolean fields
                  $value = strtolower($data[$i]);
                  if ($value === 'true' || $value === true) {
                      $values[] = 'true';
                  } elseif ($value === 'false' || $value === false) {
                      $values[] = 'false';
                  } else {
                      $values[] = $data[$i];
                  }
              } else {
                  $values[] = $data[$i];
              }
              $placeholders[] = '$' . ($i + 1);
          }
          
          $query = "INSERT INTO mitre_techniques VALUES (" . implode(',', $placeholders) . ")";
          $result = pg_query_params($conn, $query, $values);
          
          if ($result) {
              $count++;
          } else {
              echo "Error: " . pg_last_error($conn) . "\n";
          }
          
          if ($count % 100 == 0) {
              echo "Imported: $count rows\n";
          }
      }

      echo "Import completed: $count techniques imported\n";
      pg_close($conn);
      ?>
    dest: /var/www/html/scripts/php/import_mitre_excel.php
    mode: '0755'
    owner: www-data
    group: www-data

- name: Importer les données Excel dans mitre_techniques
  become: true
  become_user: www-data
  shell: php /var/www/html/scripts/php/import_mitre_excel.php
  ignore_errors: yes

- name: Supprimer l'utilisateur admin s'il existe
  become: true
  become_user: postgres
  postgresql_query:
    db: "{{ db_name }}"
    query: "DELETE FROM users WHERE email='admin@local.com';"
  ignore_errors: yes

- name: Créer le fichier admin.txt avec le template
  copy:
    content: |
      PurpleLab Admin Credentials
      ==========================

      Web Application:
      Username: admin@local.com
      Password: 

      OpenSearch & Logstash:
      Username: admin
      Password: admin123

      Sandbox VM:
      Username: oem
      Password: oem
      RDP Access: Use the IP address shown below
    dest: "/home/{{ ansible_user }}/admin.txt"
    mode: '0600'

- name: Générer un mot de passe aléatoire sécurisé
  shell: tr -dc 'A-Za-z0-9!@#$%^&*()' < /dev/urandom | head -c 12
  register: admin_password
  changed_when: false

- name: Mise à jour du fichier admin.txt avec le mot de passe généré
  replace:
    path: "/home/{{ ansible_user }}/admin.txt"
    regexp: '^Password: $'
    replace: "Password: {{ admin_password.stdout }}"
    before: "OpenSearch & Logstash"

- name: Mise à jour du username dans admin.txt
  replace:
    path: "/home/{{ ansible_user }}/admin.txt"
    regexp: '^Username: admin$'
    replace: "Username: admin@local.com"
    before: "OpenSearch & Logstash"

- name: Générer le hash du mot de passe directement avec PHP
  shell: |
    php -r "echo password_hash('{{ admin_password.stdout }}', PASSWORD_DEFAULT);"
  register: hashed_password
  changed_when: false

- name: Ajouter l'utilisateur admin
  become: true
  become_user: postgres
  postgresql_query:
    db: "{{ db_name }}"
    query: "INSERT INTO users (first_name, last_name, email, analyst_level, avatar, password) VALUES ('Admin', 'Admin', 'admin@local.com', 'n3', '/MD_image/admin.png', '{{ hashed_password.stdout }}');"

- name: Mettre à jour les scripts PHP pour utiliser la base de données
  copy:
    content: |
      <?php
      // search_techniques.php

      // Database connection
      $conn_string = "host=localhost dbname={{ db_name }} user={{ db_user }} password={{ db_pass }}";
      $conn = pg_connect($conn_string);

      if (!$conn) {
          header('Content-Type: application/json');
          die(json_encode(['error' => 'Database connection error']));
      }

      // Function to search techniques from database
      function searchTechniques($searchTerm) {
          global $conn;
          
          $searchTerm = strtoupper($searchTerm);
          $searchPattern = "%$searchTerm%";
          
          $query = "SELECT id, name 
                    FROM mitre_techniques 
                    WHERE UPPER(id) LIKE $1 
                    ORDER BY id";
          
          $result = pg_query_params($conn, $query, [$searchPattern]);
          
          if (!$result) {
              die(json_encode(['error' => 'Search error']));
          }
          
          $techniques = [];
          while ($row = pg_fetch_assoc($result)) {
              $techniques[] = $row;
          }
          
          return $techniques;
      }

      // Function to get technique details from database
      function getTechniqueDetails($id) {
          global $conn;
          
          $query = "SELECT * FROM mitre_techniques WHERE id = $1";
          $result = pg_query_params($conn, $query, [$id]);
          
          if (!$result) {
              die(json_encode(['error' => 'Error retrieving details']));
          }
          
          $technique = pg_fetch_assoc($result);
          
          if ($technique) {
              // Map database columns to expected field names
              $techniqueDetails = [
                  'ID' => $technique['id'],
                  'Name' => $technique['name'],
                  'description' => $technique['description'],
                  'url' => $technique['url'],
                  'created' => $technique['created'],
                  'last_modified' => $technique['last_modified'],
                  'tactics' => $technique['tactics'],
                  'detection' => $technique['detection'],
                  'platforms' => $technique['platforms'],
                  'data_sources' => $technique['data_sources'],
                  'defenses_bypassed' => $technique['defenses_bypassed'],
                  'permissions_required' => $technique['permissions_required'],
                  'system_requirements' => $technique['system_requirements'],
                  'impact_type' => $technique['impact_type'],
                  'effective_permissions' => $technique['effective_permissions']
              ];
              
              return $techniqueDetails;
          }
          
          return [];
      }

      // Process requests
      if (isset($_POST['searchTerm'])) {
          $searchTerm = $_POST['searchTerm'];
          $techniques = searchTechniques($searchTerm);
          header('Content-Type: application/json');
          echo json_encode($techniques);
      } elseif (isset($_POST['id'])) {
          $id = $_POST['id'];
          $techniqueDetails = getTechniqueDetails($id);
          header('Content-Type: application/json');
          echo json_encode($techniqueDetails);
      }

      // Close connection
      pg_close($conn);
      ?>
    dest: /var/www/html/scripts/php/search_techniques.php
    mode: '0644'
    owner: www-data
    group: www-data

- name: Mettre à jour le script de lecture CSV pour utiliser la base de données
  copy:
    content: |
      <?php
      // read_csv.php
      header('Content-Type: application/json');

      if (!isset($_GET['techniqueId'])) {
          die(json_encode(['error' => 'Missing technique ID']));
      }

      $techniqueId = $_GET['techniqueId'];

      // Database connection
      $conn_string = "host=localhost dbname={{ db_name }} user={{ db_user }} password={{ db_pass }}";
      $conn = pg_connect($conn_string);

      if (!$conn) {
          die(json_encode(['error' => 'Database connection error']));
      }

      // Get all atomic tests for this technique
      $query = "SELECT tactic, technique_id, technique_name, test, test_name, test_guid, executor_name 
                FROM atomic_tests 
                WHERE technique_id = $1 
                ORDER BY test";

      $result = pg_query_params($conn, $query, [$techniqueId]);

      if (!$result) {
          die(json_encode(['error' => 'Error retrieving data: ' . pg_last_error($conn)]));
      }

      $data = [];
      while ($row = pg_fetch_assoc($result)) {
          $data[] = [
              $row['tactic'],
              $row['technique_id'],
              $row['technique_name'],
              $row['test'],
              $row['test_name'],
              $row['test_guid'],
              $row['executor_name']
          ];
      }

      echo json_encode($data);
      pg_close($conn);
      ?>
    dest: /var/www/html/scripts/php/read_csv.php
    mode: '0644'
    owner: www-data
    group: www-data
