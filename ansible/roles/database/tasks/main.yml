---
- name: Installer PostgreSQL
  apt:
    name: 
      - postgresql
      - postgresql-contrib
      - python3-psycopg2
    state: present
    update_cache: true

- name: Démarrer et activer PostgreSQL
  service:
    name: postgresql
    state: started
    enabled: yes

- name: Créer l'utilisateur PostgreSQL
  become: true
  become_user: postgres
  postgresql_user:
    name: "{{ db_user }}"
    password: "{{ db_pass }}"
    role_attr_flags: SUPERUSER
    state: present

- name: Créer la base de données
  become: true
  become_user: postgres
  postgresql_db:
    name: "{{ db_name }}"
    owner: "{{ db_user }}"
    state: present

- name: Configurer l'authentification pour les connexions locales (mettre à jour pg_hba.conf)
  block:
    - name: Trouver le chemin du fichier pg_hba.conf
      shell: find /etc/postgresql -name pg_hba.conf
      register: pg_hba_path
      changed_when: false
    
    - name: Vérifier que le fichier pg_hba.conf existe
      debug:
        msg: "Fichier pg_hba.conf trouvé à: {{ pg_hba_path.stdout_lines[0] }}"
      when: pg_hba_path.stdout_lines | length > 0
    
    - name: Mettre à jour pg_hba.conf pour les connexions locales
      lineinfile:
        path: "{{ pg_hba_path.stdout_lines[0] }}"
        regexp: '^local\s+all\s+postgres\s+peer'
        line: 'local   all             postgres                                peer'
        state: present
      when: pg_hba_path.stdout_lines | length > 0
      register: pg_hba_updated

- name: Redémarrer PostgreSQL si pg_hba.conf a été modifié
  service:
    name: postgresql
    state: restarted
  when: pg_hba_updated is defined and pg_hba_updated.changed

- name: Créer le répertoire d'importation
  file:
    path: /var/www/html/enterprise-attack
    state: directory
    mode: '0755'
    owner: postgres
    group: postgres

- name: Copier le fichier CSV des tests atomiques
  copy:
    src: ../../enterprise-attack/index_atomic.csv
    dest: /var/www/html/enterprise-attack/index.csv
    mode: '0644'
    owner: postgres
    group: postgres

- name: Créer les tables dans PostgreSQL
  become: true
  become_user: postgres
  postgresql_query:
    db: "{{ db_name }}"
    query: |
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        first_name VARCHAR(255) NOT NULL,
        last_name VARCHAR(255) NOT NULL,
        email VARCHAR(255) NOT NULL UNIQUE,
        analyst_level VARCHAR(255) NOT NULL,
        avatar VARCHAR(255) NOT NULL,
        password VARCHAR(255) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
      
      CREATE TABLE IF NOT EXISTS contents (
        id SERIAL PRIMARY KEY,
        author_id INTEGER NOT NULL,
        content TEXT NOT NULL,
        FOREIGN KEY (author_id) REFERENCES users(id)
      );
      
      CREATE TABLE IF NOT EXISTS custom_payloads (
        id SERIAL PRIMARY KEY,
        author_id INTEGER NOT NULL,
        name VARCHAR(255) NOT NULL,
        content TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (author_id) REFERENCES users(id)
      );
      
      CREATE TABLE IF NOT EXISTS atomic_tests (
        id SERIAL PRIMARY KEY,
        tactic VARCHAR(255),
        technique_id VARCHAR(255),
        technique_name VARCHAR(255),
        test VARCHAR(255),
        test_name VARCHAR(255),
        Test_GUID VARCHAR(255),
        Executor_Name VARCHAR(255),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );

- name: Importer les données CSV dans atomic_tests
  become: true
  become_user: postgres
  shell: |
    psql -d {{ db_name }} -c "\COPY atomic_tests(tactic, technique_id, technique_name, test, test_name, Test_GUID, Executor_Name) FROM '/var/www/html/enterprise-attack/index.csv' WITH (FORMAT csv, DELIMITER ';', HEADER true, NULL '');"
  ignore_errors: yes

- name: Supprimer l'utilisateur admin s'il existe
  become: true
  become_user: postgres
  postgresql_query:
    db: "{{ db_name }}"
    query: "DELETE FROM users WHERE email='admin@local.com';"
  ignore_errors: yes

- name: Créer le fichier admin.txt avec le template
  copy:
    content: |
      PurpleLab Admin Credentials
      ==========================

      Web Application:
      Username: admin@local.com
      Password: 

      OpenSearch & Logstash:
      Username: admin
      Password: admin123

      Sandbox VM:
      Username: oem
      Password: oem
      RDP Access: Use the IP address shown below
    dest: "/home/{{ ansible_user }}/admin.txt"
    mode: '0600'

- name: Générer un mot de passe aléatoire sécurisé
  shell: tr -dc 'A-Za-z0-9!@#$%^&*()' < /dev/urandom | head -c 12
  register: admin_password
  changed_when: false

- name: Mise à jour du fichier admin.txt avec le mot de passe généré
  replace:
    path: "/home/{{ ansible_user }}/admin.txt"
    regexp: '^Password: $'
    replace: "Password: {{ admin_password.stdout }}"
    before: "OpenSearch & Logstash"

- name: Mise à jour du username dans admin.txt
  replace:
    path: "/home/{{ ansible_user }}/admin.txt"
    regexp: '^Username: admin$'
    replace: "Username: admin@local.com"
    before: "OpenSearch & Logstash"

- name: Générer le hash du mot de passe directement avec PHP
  shell: |
    php -r "echo password_hash('{{ admin_password.stdout }}', PASSWORD_DEFAULT);"
  register: hashed_password
  changed_when: false

- name: Ajouter l'utilisateur admin
  become: true
  become_user: postgres
  postgresql_query:
    db: "{{ db_name }}"
    query: "INSERT INTO users (first_name, last_name, email, analyst_level, avatar, password) VALUES ('Admin', 'Admin', 'admin@local.com', 'n3', '/MD_image/admin.png', '{{ hashed_password.stdout }}');"
