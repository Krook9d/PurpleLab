---
- name: Configure Apache VirtualHost
  copy:
    content: |
      <VirtualHost *:80>
          DirectoryIndex index.php
      </VirtualHost>
    dest: /etc/apache2/sites-available/000-default.conf
  notify: Restart Apache

- name: Install Apache and PHP packages
  apt:
    name: 
      - apache2
      - php
      - libapache2-mod-php
      - php-curl
      - php-mysqli
      - php-pgsql
      - python3-pip
      - p7zip-full
      - apt-transport-https
      - libapache2-mod-ldap-userdir
      - php-xml
      - php-gd
      - php-mbstring
      - php-zip
    state: present
    update_cache: true

- name: Detect installed PHP version
  shell: php -r "echo PHP_MAJOR_VERSION.'.'.PHP_MINOR_VERSION;"
  register: php_version
  changed_when: false

- name: Display detected PHP version
  debug:
    msg: "Detected PHP version: {{ php_version.stdout }}"

- name: Check Apache php.ini file existence
  stat:
    path: "/etc/php/{{ php_version.stdout }}/apache2/php.ini"
  register: php_ini_apache

- name: Check CLI php.ini file existence (fallback)
  stat:
    path: "/etc/php/{{ php_version.stdout }}/cli/php.ini"
  register: php_ini_cli
  when: not php_ini_apache.stat.exists

- name: Set php.ini file path to use
  set_fact:
    php_ini_path: >-
      {%- if php_ini_apache.stat.exists -%}
      /etc/php/{{ php_version.stdout }}/apache2/php.ini
      {%- elif php_ini_cli.stat.exists -%}
      /etc/php/{{ php_version.stdout }}/cli/php.ini
      {%- else -%}
      /etc/php/{{ php_version.stdout }}/apache2/php.ini
      {%- endif -%}

- name: Display php.ini path used
  debug:
    msg: "Using php.ini file: {{ php_ini_path }}"

- name: Configure PHP limits for file uploads
  lineinfile:
    path: "{{ php_ini_path }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    backup: yes
    create: yes
  with_items:
    - { regexp: '^upload_max_filesize\s*=', line: 'upload_max_filesize = 50M' }
    - { regexp: '^post_max_size\s*=', line: 'post_max_size = 60M' }
    - { regexp: '^max_execution_time\s*=', line: 'max_execution_time = 300' }
    - { regexp: '^max_input_time\s*=', line: 'max_input_time = 300' }
  notify: Restart Apache

- name: Enable Apache modules
  apache2_module:
    name: "{{ item }}"
    state: present
  with_items:
    - ldap
    - authnz_ldap
    - rewrite

- name: Enable mysqli module
  shell: phpenmod mysqli
  changed_when: false

- name: Enable pgsql module
  shell: phpenmod pgsql
  changed_when: false

- name: Install Python dependencies
  pip:
    name: 
      - pandas
      - flask
      - flask-cors
      - loguru
      - stix2
      - mitreattack-python
      - Flask-JWT-Extended
    state: present

- name: Start and enable Apache service
  service:
    name: apache2
    state: started
    enabled: yes

- name: Move PurpleLab files to webroot
  shell: |
    cp -r /home/{{ ansible_user }}/PurpleLab/* /var/www/html/
    if [ -d "/var/www/html/Web" ]; then
      cp -r /var/www/html/Web/* /var/www/html/
      rm -rf /var/www/html/Web
    fi
  ignore_errors: yes

- name: Move app.py to user directory
  copy:
    src: files/app.py
    dest: "/home/{{ ansible_user }}/app.py"
    remote_src: yes
    mode: '0755'

- name: Ensure project directory is writable
  file:
    path: /var/www/html
    state: directory
    mode: '0775'
    owner: www-data
    group: www-data
    recurse: yes

- name: Remove default index.html
  file:
    path: /var/www/html/index.html
    state: absent

- name: Set appropriate permissions
  file:
    path: "{{ item.path }}"
    state: directory
    mode: "{{ item.mode }}"
    recurse: "{{ item.recurse | default(no) }}"
  with_items:
    - { path: '/var/www/html/', mode: '0775', recurse: yes }
    - { path: '/var/www/html/uploads/', mode: '0770', recurse: yes }
    - { path: '/var/www/html/Downloaded/malware_upload/', mode: '0777', recurse: yes }
    - { path: '/var/www/html/config/', mode: '0750', recurse: no }

- name: Set permissions for admin.php
  file:
    path: /var/www/html/admin.php
    mode: '0755'
    state: file

- name: Add environment variables to Apache
  lineinfile:
    path: /etc/apache2/envvars
    line: "{{ item }}"
  with_items:
    - "export DB_HOST='localhost'"
    - "export DB_USER='{{ db_user }}'"
    - "export DB_PASS='{{ db_pass }}'"
    - "export DB_NAME='{{ db_name }}'"
    - "export ENCRYPTION_KEY='{{ encryption_key }}'"
    - "export OPENSEARCH_ADMIN_PASSWORD='admin123'"
  notify: Restart Apache 
