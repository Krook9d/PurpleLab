<?php
error_reporting(E_ALL);
ini_set('display_errors', 1);

session_start();

if (!isset($_SESSION['user_id'])) {
    header("Location: connexion.html");
    exit();
}

$conn_string = sprintf(
    "host=%s port=5432 dbname=%s user=%s password=%s",
    getenv('DB_HOST'),
    getenv('DB_NAME'),
    getenv('DB_USER'),
    getenv('DB_PASS')
);

$conn = pg_connect($conn_string);

if (!$conn) {
    die("Connection failed: " . pg_last_error());
}

$email = $_SESSION['email'];

$sql = "SELECT first_name, last_name, email, analyst_level, avatar FROM users WHERE email=$1";
$result = pg_query_params($conn, $sql, array($email));

if ($result && $row = pg_fetch_assoc($result)) {
    $first_name = $row['first_name'];
    $last_name = $row['last_name'];
    $email = $row['email'];
    $analyst_level = $row['analyst_level'];
    $avatar = $row['avatar'];
} else {
    die("The user information retrieval encountered an error.");
}

pg_free_result($result);
pg_close($conn);

function isProcessRunning($pid) {
    return file_exists("/proc/$pid");
}

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_POST['malwareFamily'])) {
        // Empty directories before running script
        shell_exec('rm -rf /var/www/html/Downloaded/json/*');
        shell_exec('rm -rf /var/www/html/Downloaded/samples/*');
        shell_exec('rm -rf /var/www/html/csv/*');


        $malwareFamily = $_POST['malwareFamily'];
        $url = 'http://127.0.0.1:5000/malware_retrieval';
        $data = array('malwareFamily' => $malwareFamily);
        $options = array(
            'http' => array(
                'header'  => "Content-type: application/json\r\n",
                'method'  => 'POST',
                'content' => json_encode($data),
            ),
        );
        $context  = stream_context_create($options);
        $result = file_get_contents($url, false, $context);
        if ($result === FALSE) {
            die("Error during script execution.");
        }

        $response = json_decode($result, true);
        $_SESSION['pid'] = trim($response['pid']);
        $_SESSION['status'] = 'Retrieval in progress';

        echo json_encode(['status' => $_SESSION['status']]);
        exit();
    }

    if (isset($_POST['checkStatus']) && isset($_SESSION['pid'])) {
        if (isProcessRunning($_SESSION['pid'])) {
            $_SESSION['status'] = 'Retrieval in progress';
        } else {
            $_SESSION['status'] = 'Done';
            unset($_SESSION['pid']);
        }

        echo json_encode(['status' => $_SESSION['status']]);
        exit();
    }

    if (isset($_POST['fetch_csv'])) {
        $directory = "/var/www/html/csv";
        $csvFile = null;

        foreach (glob("{$directory}/*.csv") as $file) {
            $csvFile = $file;
            break;
        }

        if ($csvFile) {
            $columnsWanted = ['md5_hash', 'first_seen', 'last_seen', 'file_name', 'file_size', 'file_type_mime', 'file_type', 'reporter'];
            $output = [];

            if (($handle = fopen($csvFile, 'r')) !== FALSE) {
                $headers = fgetcsv($handle, 1000, ",");
                while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
                    $rowData = [];
                    foreach ($columnsWanted as $column) {
                        $index = array_search($column, $headers);
                        if ($index !== false && isset($data[$index])) {
                            $rowData[$column] = $data[$index];
                        }
                    }
                    $output[] = $rowData;
                }
                fclose($handle);
            } else {
                $errorMsg = "Error reading CSV file.";
            }
        } else {
            $errorMsg = "No CSV file found.";
        }
    }
}

?>


<!DOCTYPE html>
<html lang="fr">
<head>
    <link rel="icon" href="MD_image/logowhite.png" type="image/png">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Purplelab</title>
    <link rel="stylesheet" href="css/main.css?v=<?= filemtime('css/main.css') ?>">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.9.2/min/dropzone.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Slab:wght@400;700&display=swap" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.9.2/min/dropzone.min.js"></script>

<!-- Dropzone basic configuration -->
<script>
Dropzone.options.malwareUpload = {
  paramName: "file",
  maxFilesize: 50,
  url: "scripts/php/upload.php",
  acceptedFiles: ".exe,.dll,.bin,.py,.ps1,.xlsx,.ods,.pdf",
  dictDefaultMessage: `
    <div class="upload-icon">üìÅ</div>
    <div class="upload-title">Drop your malware files here</div>
    <div class="upload-subtitle">or click to browse and select files</div>
    <div class="upload-formats">Supported: .exe, .dll, .bin, .py, .ps1, .xlsx, .ods, .pdf (max 50MB)</div>
  `,
  init: function() {
    this.on("complete", function(file) {
      this.removeFile(file);
    });
    this.on("success", function(file, response) {
      // Update HTML element with success message
      document.getElementById('uploadStatus').innerHTML = "<p class='success'>Success: " + response + "</p>";
    });
    this.on("error", function(file, response) {
      // Update HTML element with error message
      var errorMessage = response;
      if(typeof response === 'object' && response.error) {
        errorMessage = response.error;
      }
      document.getElementById('uploadStatus').innerHTML = "<p class='error'>Error: " + errorMessage + "</p>";
    });
  }
};
</script>

    <script>
        $(document).ready(function() {
            $('#myForm').on('submit', function(e) {
                e.preventDefault();
                
                // Show initial progress
                showProgress('Initializing malware retrieval...', 'in-progress');
                
                $.post('malware.php', { malwareFamily: $('[name="malwareFamily"]').val() }, function(data) {
                    if (data.status === 'Retrieval in progress') {
                        showProgress('Downloading malware samples from MalwareBazaar...', 'in-progress');
                        pollForCompletion();
                    } else if (data.status === 'Done') {
                        showProgress('Malware retrieval completed successfully!', 'completed');
                        $('#csvButton').prop('disabled', false);
                    }
                }, 'json').fail(function() {
                    $('#message').html('<div class="download-progress error"><div class="progress-icon">‚ùå</div><div><div class="progress-text">Download failed</div><div class="progress-details">Please try again</div></div></div>');
                });
            });

            // Initialize button as disabled
            $('#csvButton').prop('disabled', true);

            function pollForCompletion() {
                $.post('malware.php', { checkStatus: true }, function(data) {
                    if (data.status === 'Retrieval in progress') {
                        // Update progress message with more details
                        showProgress('Processing malware samples...', 'in-progress');
                        setTimeout(pollForCompletion, 3000); // Check every 3 seconds
                    } else if (data.status === 'Done') {
                        showProgress('‚úÖ All malware samples downloaded and processed!', 'completed');
                        $('#csvButton').prop('disabled', false);
                        
                        // Show CSV button with animation
                        $('#csvButton').addClass('pulse');
                        setTimeout(() => {
                            $('#csvButton').removeClass('pulse');
                        }, 3000);
                    }
                }, 'json').fail(function() {
                    $('#message').html('<div class="download-progress error"><div class="progress-icon">‚ùå</div><div><div class="progress-text">Status check failed</div><div class="progress-details">Please refresh the page</div></div></div>');
                });
            }
            
            function showProgress(text, status) {
                let iconHtml = '';
                let detailsHtml = '';
                
                if (status === 'in-progress') {
                    iconHtml = '<div class="progress-spinner"></div>';
                    detailsHtml = '<div class="progress-details">This may take a few moments...</div>';
                } else if (status === 'completed') {
                    iconHtml = '<div class="progress-icon">‚úÖ</div>';
                    detailsHtml = '<div class="progress-details">Ready to view results</div>';
                }
                
                const progressHtml = `
                    <div class="download-progress ${status}">
                        ${iconHtml}
                        <div>
                            <div class="progress-text ${status === 'in-progress' ? 'pulse' : ''}">${text}</div>
                            ${detailsHtml}
                        </div>
                    </div>
                `;
                
                $('#message').html(progressHtml);
            }

            $('.runMalware').click(function() {
                let rowData = $(this).closest('tr').find('td').map(function() {
                    return $(this).text();
                }).get();

                // your future action for the Execute button.
                console.log(rowData);
            });

        });
    </script>



<script>

document.addEventListener('DOMContentLoaded', function() {
    var listMalwaresButton = document.getElementById('listMalwares');
    var malwareListDiv = document.getElementById('malwareList');

    listMalwaresButton.addEventListener('click', function() {
        if (malwareListDiv.classList.contains('open')) {
            malwareListDiv.classList.remove('open');
            setTimeout(() => {
                malwareListDiv.style.display = "none";
            }, 500); // Delay matching the CSS transition duration
        } else {
            malwareListDiv.style.display = "block";
            setTimeout(() => {
                malwareListDiv.classList.add('open');
            }, 10); // Slight delay to allow display to take effect before adding the class
            
            fetch('scripts/php/list_malwares.php')
                .then(response => response.text())
                .then(html => {
                    malwareListDiv.innerHTML = html;
                    malwareListDiv.classList.add('content-loaded'); // Ensure smooth transition once content is loaded
                })
                .catch(error => {
                    console.error('Error fetching the malware list:', error);
                });
        }
    });
});


</script>

</head>

<body>

<div class="nav-bar">

        <!-- Add logo to top of nav-bar -->
        <div class="nav-logo">
        <img src="MD_image/logowhiteV3.png" alt="Logo" /> 
    </div>

    <!-- Display software version -->
    <?php include $_SERVER['DOCUMENT_ROOT'].'/scripts/php/version.php'; ?>
        <div class="software-version">
        <?php echo SOFTWARE_VERSION; ?>
    </div>

    <ul>
        <li><a href="index.php"><i class="fas fa-home"></i> Home</a></li>
        <li><a href="http://<?= $_SERVER['SERVER_ADDR'] ?>:5601" target="_blank"><i class="fas fa-crosshairs"></i> Hunting</a></li>
        <li><a href="mittre.php"><i class="fas fa-book"></i> Mitre Att&ck</a></li>
        <li><a href="custom_payloads.php"><i class="fas fa-code"></i> Custom Payloads</a></li>
        <li><a href="malware.php"><i class="fas fa-virus"></i> Malware</a></li>
        <li><a href="sharing.php"><i class="fas fa-pencil-alt"></i> Sharing</a></li>
        <li><a href="sigma.php"><i class="fas fa-shield-alt"></i> Sigma Rules</a></li>
        <li><a href="rule_lifecycle.php" class="active"><i class="fas fa-cogs"></i> Rule Lifecycle</a></li>
        <li><a href="health.php"><i class="fas fa-heartbeat"></i> Health</a></li>
           <?php if (isset($_SESSION['email']) && $_SESSION['email'] === 'admin@local.com'): ?>
        <li><a href="admin.php"><i class="fas fa-user-shield"></i> Admin</a></li>
    <?php endif; ?>
    </ul>

        <!-- Container for credits at the bottom of the nav-bar -->
        <div class="nav-footer">
        <a href="https://github.com/Krook9d" target="_blank">
            <img src="https://pngimg.com/uploads/github/github_PNG20.png" alt="GitHub Icon" class="github-icon"/> 
            Made by Krook9d
        </a>
    </div>
</div>


<div class="user-info-bar">
    <div class="avatar-info">
        <img src="<?= $avatar ?>" alt="Avatar">
        <button class="user-button">
            <span><?= $first_name ?> <?= $last_name ?></span>
            <div class="dropdown-content">
                <a href="malware.php" id="settings-link">Settings</a>
                <a href="logout.php">Logout</a>
            </div>
        </button>
    </div>
</div>

<div class="content">

<br><br><br><br>
<h1 class="title">Malware Downloader</h1>
    <br>
    <form id="myForm" method="post">
        <input type="text" name="malwareFamily" placeholder="Enter Malware Family">
        <input type="submit" name="submit" value="Download" class="malwarebazarbutton">
   
    </form>
    <p id="message"></p>

    <form method="POST" action="">
        <button type="submit" name="fetch_csv" id="csvButton" class="displaycsvcontent">Display the content of the CSV</button>
    </form>


  <?php
    if (isset($output)) {
        echo "<div class='malware-list-container'>"; 
        echo "<div class='malware-list-header'>";
        echo "<h3><i class='fas fa-download'></i> Downloaded Malware Samples</h3>";
        echo "</div>";
        echo "<table class='malware-list-table'>"; 
        echo "<thead><tr>";
        
        // Map column names to icons and display names
        $columnConfig = [
            'md5_hash' => ['icon' => 'fas fa-fingerprint', 'name' => 'MD5 Hash'],
            'first_seen' => ['icon' => 'fas fa-calendar-plus', 'name' => 'First Seen'],
            'last_seen' => ['icon' => 'fas fa-calendar-check', 'name' => 'Last Seen'],
            'file_name' => ['icon' => 'fas fa-file', 'name' => 'File Name'],
            'file_size' => ['icon' => 'fas fa-weight-hanging', 'name' => 'Size'],
            'file_type_mime' => ['icon' => 'fas fa-file-code', 'name' => 'MIME Type'],
            'file_type' => ['icon' => 'fas fa-tag', 'name' => 'Type'],
            'reporter' => ['icon' => 'fas fa-user-shield', 'name' => 'Reporter']
        ];
        
        foreach ($columnsWanted as $column) {
            $config = $columnConfig[$column] ?? ['icon' => 'fas fa-info', 'name' => $column];
            echo "<th><i class='{$config['icon']}'></i> {$config['name']}</th>";
        }
        echo "<th><i class='fas fa-play'></i> Execute</th>";  
        echo "</tr></thead><tbody>";

        foreach ($output as $rowData) {
            echo "<tr class='malware-row'>";
            
            foreach ($rowData as $key => $cell) {
                echo "<td>";
                
                // Special formatting for different columns
                if ($key === 'file_name') {
                    echo "<div class='file-info'>";
                    echo "<div class='file-icon'>ü¶†</div>";
                    echo "<div class='file-details'>";
                    echo "<div class='file-name'>" . htmlspecialchars($cell) . "</div>";
                    echo "</div></div>";
                } else if ($key === 'file_size') {
                    echo "<div class='file-size'>" . formatBytes($cell) . "</div>";
                } else if ($key === 'file_type') {
                    $typeClass = getTypeClass($cell);
                    echo "<div class='file-type'><span class='type-badge {$typeClass}'>" . htmlspecialchars($cell) . "</span></div>";
                } else if ($key === 'first_seen' || $key === 'last_seen') {
                    echo "<div class='file-date'>";
                    echo "<div class='date-primary'>" . formatDate($cell) . "</div>";
                    echo "<div class='date-secondary'>" . formatRelativeDate($cell) . "</div>";
                    echo "</div>";
                } else {
                    echo "<div>" . htmlspecialchars($cell) . "</div>";
                }
                
                echo "</td>";
            }
            
            $fileName = isset($rowData['file_name']) ? $rowData['file_name'] : '';
            echo "<td class='file-actions'>";
            echo "<button class='action-btn run-btn runMalware' data-filename='" . htmlspecialchars($fileName) . "'>";
            echo "<i class='fas fa-play'></i> Run";
            echo "</button>";
            echo "</td>"; 
            echo "</tr>";
        }

        echo "</tbody></table></div>";
    }

    if (isset($errorMsg)) {
        echo "<div class='malware-list-empty'>";
        echo "<div class='empty-icon'>‚ö†Ô∏è</div>";
        echo "<h3>Error Loading Data</h3>";
        echo "<p style='color:#ef4444;'>{$errorMsg}</p>";
        echo "</div>";
    }
    
    // Helper functions for formatting
    function formatBytes($size) {
        if (!is_numeric($size)) return $size;
        $units = ['B', 'KB', 'MB', 'GB'];
        $factor = floor((strlen($size) - 1) / 3);
        return sprintf("%.2f %s", $size / pow(1024, $factor), $units[$factor]);
    }
    
    function getTypeClass($type) {
        $type = strtolower($type);
        if (strpos($type, 'exe') !== false || strpos($type, 'dll') !== false) return 'type-danger';
        if (strpos($type, 'script') !== false || strpos($type, 'batch') !== false) return 'type-warning';
        if (strpos($type, 'document') !== false || strpos($type, 'pdf') !== false) return 'type-info';
        return 'type-secondary';
    }
    
    function formatDate($dateString) {
        if (!$dateString) return 'N/A';
        $date = DateTime::createFromFormat('Y-m-d H:i:s', $dateString);
        if (!$date) $date = DateTime::createFromFormat('Y-m-d', $dateString);
        return $date ? $date->format('M j, Y') : $dateString;
    }
    
    function formatRelativeDate($dateString) {
        if (!$dateString) return '';
        $date = DateTime::createFromFormat('Y-m-d H:i:s', $dateString);
        if (!$date) $date = DateTime::createFromFormat('Y-m-d', $dateString);
        if (!$date) return '';
        
        $now = new DateTime();
        $diff = $now->diff($date);
        
        if ($diff->days == 0) return 'Today';
        if ($diff->days == 1) return 'Yesterday';
        if ($diff->days < 7) return $diff->days . ' days ago';
        if ($diff->days < 30) return floor($diff->days / 7) . ' weeks ago';
        if ($diff->days < 365) return floor($diff->days / 30) . ' months ago';
        return floor($diff->days / 365) . ' years ago';
    }
    ?>



<hr class="separation">

<h1 class="title">Malware Uploader</h1>
<br>
<form action="scripts/php/upload.php" class="dropzone" id="malwareUpload"></form>
<div id="uploadStatus"></div>

<br>
<button id="listMalwares" class="displaycsvcontent">List of hosted malware</button>
<div id="malwareList" class="hidden">
   
</div>

</div>

<script>
$(document).ready(function() {
    // Manager to show/hide CSV contents
    $('#toggleCsvContent').click(function() {
        $('#csvContent').toggle();
    });

    // Using event delegation for .runMalware buttons
$(document).on('click', '.runMalware', function() {
    let fileName = $(this).data('filename');

    if (fileName) {
        let dataToSend = JSON.stringify({ file_name: fileName });

        $.ajax({
            type: 'POST',
            url: 'http://' + window.location.hostname + ':5000/execute_upload',
            contentType: 'application/json',
            data: dataToSend,
            success: function(response) {
                console.log('Server response:', response);
                alert("File " + fileName + " triggered, see it on the hunting page");
            },
            error: function(xhr, status, error) {
                console.error('Erreur lors de la requ√™te:', error);
                alert("Problem with the file encountered");
            }
        });
    } else {
        console.error('The file name is missing or empty.');
        alert("The file name is missing or empty.");
    }
});

});

// Function to delete malware files
function deleteMalware(fileName) {
    if (confirm('Are you sure you want to delete "' + fileName + '"? This action cannot be undone.')) {
        $.ajax({
            type: 'POST',
            url: 'scripts/php/delete_malware.php',
            data: { filename: fileName },
            dataType: 'json', // Explicitly expect JSON
            success: function(response) {
                if (response.success) {
                    // Show success message
                    $('#uploadStatus').html("<p class='success'>File deleted successfully: " + fileName + "</p>");
                    
                    // Refresh the malware list
                    setTimeout(function() {
                        $('#listMalwares').click();
                        $('#listMalwares').click(); // Double click to refresh
                    }, 1000);
                } else {
                    $('#uploadStatus').html("<p class='error'>Error: " + response.message + "</p>");
                }
            },
            error: function(xhr, status, error) {
                // Try to parse the response in case it's JSON with an error
                try {
                    const response = JSON.parse(xhr.responseText);
                    $('#uploadStatus').html("<p class='error'>Error: " + response.message + "</p>");
                } catch (e) {
                    // If it's not JSON, show the raw error
                    $('#uploadStatus').html("<p class='error'>Error deleting file: " + error + "</p>");
                }
            }
        });
    }
}
</script>

</body>
</html>
